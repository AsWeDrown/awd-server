///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Основные параметры .proto.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";
package awd.net;




///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Опции для компиляции .proto в Java.
// Для самой компиляции исп. скрипт "compile_proto_files_for_java".
//
///////////////////////////////////////////////////////////////////////////////////////////////////

option java_multiple_files = true;
option java_package = "gg.aswedrown.net";




///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Спецификация протокола AsWeDrown:
// --> https://github.com/AsWeDrown/awd-protocol/wiki/
//
// TODO - МЕНЯТЬ ЗДЕСЬ: PROTOCOL_VERSION = 1
// 
// TODO - При любом изменении этого файла (и, соответственно, версии протокола) выполнять
//        скрипт "0_on_proto_files_change.bat", находящийся в папке "AwdClient/scripts".
// 
// ВАЖНО: основная ("рабочая") версия этого файла находится в папке "AwdClient/net".
//        В любых местах лежит лишь копия, которая используется максимум для удобства!
//
///////////////////////////////////////////////////////////////////////////////////////////////////

/*
---------------------------------------------------------------------------------------------------
   ПРЕДЫГРОВОЙ ЭТАП (LOBBY STATE)
---------------------------------------------------------------------------------------------------
 */

message HandshakeRequest {
  int32 protocolVersion = 1;
}

message HandshakeResponse {
  int32 protocolVersion = 1;
}

message CreateLobbyRequest {
  string playerName = 1;
}

message CreateLobbyResponse {
  int32 lobbyId  = 1;
  int32 playerId = 2;
}

message JoinLobbyRequest {
  int32  lobbyId    = 1;
  string playerName = 2;
}

message JoinLobbyResponse {
  int32              playerId     = 1;
  map<int32, string> otherPlayers = 2;
}

message LeaveLobbyRequest {
  int32 lobbyId  = 1;
  int32 playerId = 2;
}

message LeaveLobbyResponse {
  int32 statusCode = 1;
}

message KickedFromLobby {
  int32 reason = 1;
}

/*
---------------------------------------------------------------------------------------------------
   ИГРОВОЙ ЭТАП (PLAY STATE)
---------------------------------------------------------------------------------------------------
 */

message KeepAlive {
  int32 playerId = 1;
  int32 testId   = 2;
}

/*
---------------------------------------------------------------------------------------------------
   ОБЩИЕ (GENERAL)
---------------------------------------------------------------------------------------------------
 */

message Ping {
  uint64 serverTime = 1;
}

message Pong {
  uint64 clientTime = 1;
}

/*
---------------------------------------------------------------------------------------------------
   ОБЁРТКА ВСЕХ ПАКЕТОВ
   Используется для идентификации пакетов при получении их в виде "сырого" массива байтов.
---------------------------------------------------------------------------------------------------
 */

message PacketWrapper {
  // Номера с     1 по   999 зарезервированы под пакеты предыгрового этапа (LOBBY STATE),
  //        с  1000 по  9999               - под пакеты игрового этапа (PLAY STATE),
  //        с 10000 по 99999               - под общие пакеты (GENERAL)
  //
  // ВАЖНО: внутри этого блока 'oneof packet {...}' запрещено использовать комментарии /* такого */ вида
  //        (в т.ч. многострочные - последовательность "/*" внутри этого блока не должно быть в любом виде).
  oneof packet {
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   LOBBY STATE
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    HandshakeRequest           handshakeRequest           =     1;
    HandshakeResponse          handshakeResponse          =     2;
    CreateLobbyRequest         createLobbyRequest         =   100;
    CreateLobbyResponse        createLobbyResponse        =   101;
    JoinLobbyRequest           joinLobbyRequest           =   102;
    JoinLobbyResponse          joinLobbyResponse          =   103;
    LeaveLobbyRequest          leaveLobbyRequest          =   104;
    LeaveLobbyResponse         leaveLobbyResponse         =   105;
    KickedFromLobby            kickedFromLobby            =   106;

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   PLAY STATE
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    KeepAlive                  keepAlive                  =  1000;

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   GENERAL
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Ping                       ping                       = 10000;
    Pong                       pong                       = 10001;
  }
}
