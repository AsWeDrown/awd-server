///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Основные параметры .proto.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";
package awd.net;




///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Опции для компиляции .proto в Java.
// Для самой компиляции исп. скрипт "compile_proto_files_for_java".
//
///////////////////////////////////////////////////////////////////////////////////////////////////

option java_multiple_files = true;
option java_package = "gg.aswedrown.net";




///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Спецификация протокола AsWeDrown:
// --> https://github.com/AsWeDrown/awd-protocol/wiki/
//
// TODO - МЕНЯТЬ ЗДЕСЬ: PROTOCOL_VERSION = 1
// 
// TODO - При любом изменении этого файла (и, соответственно, версии протокола) выполнять
//        скрипт "0_on_proto_files_change.bat", находящийся в папке "AwdClient/scripts".
// 
// ВАЖНО: основная ("рабочая") версия этого файла находится в папке "AwdClient/net".
//        В любых местах лежит лишь копия, которая используется максимум для удобства!
//
///////////////////////////////////////////////////////////////////////////////////////////////////

/*
---------------------------------------------------------------------------------------------------
   ПРОТОКОЛООБРАЗУЮЩИЕ (PROTOCOL BASICS)
---------------------------------------------------------------------------------------------------
 */

message Ping { // C <-- S
  uint32 test_id = 1;
  uint32 rtt     = 2;
}

message Pong { // C --> S
  uint32 test_id = 1;
}

/*
---------------------------------------------------------------------------------------------------
   ПРЕДЫГРОВОЙ ЭТАП (LOBBY STATE)
---------------------------------------------------------------------------------------------------
 */

message HandshakeRequest { // C --> S
  uint32 protocol_version = 1;
}

message HandshakeResponse { // C <-- S
  uint32 protocol_version = 1;
}

message CreateLobbyRequest { // C --> S
  string player_name = 1;
}

message CreateLobbyResponse { // C <-- S
  sint32 lobby_id  = 1;
  uint32 player_id = 2;
  uint32 character = 3;
}

message JoinLobbyRequest { // C --> S
  uint32 lobby_id    = 1;
  string player_name = 2;
}

message JoinLobbyResponse { // C <-- S
  sint32              player_id         = 1;
  uint32              character         = 2;
  uint32              host_id           = 3;
  map<uint32, string> others_names      = 4;
  map<uint32, uint32> others_characters = 5;
}

message LeaveLobbyRequest { // C --> S
  /* empty packet */
}

message LeaveLobbyResponse { // C <-- S
  sint32 status_code = 1;
}

message KickedFromLobby { // C <-- S
  uint32 reason = 1;
}

message UpdatedMembersList { // C <-- S
  map<uint32, string> new_all_names      = 1;
  map<uint32, uint32> new_all_characters = 2;
}

message BeginPlayStateRequest { // C --> S
  string save_id = 1;
}

message BeginPlayStateResponse { // C <-- S
  sint32 status_code = 1;
}

/*
---------------------------------------------------------------------------------------------------
   ИГРОВОЙ ЭТАП (PLAY STATE)
---------------------------------------------------------------------------------------------------
 */

message UpdateDimensionCommand { // C <-- S
  uint32 dimension = 1;
}

message UpdateDimensionComplete { // C --> S
  /* empty packet */
}

message JoinWorldCommand { // C <-- S
  /* empty packet */
}

message JoinWorldComplete { // C --> S
  /* empty packet */
}

message SpawnEntity { // C <-- S
  uint32              entity_type = 1;
  uint32              entity_id   = 2;
  map<string, string> entity_data = 3;
}

message DespawnEntity { // C <-- S
  uint32 entity_id = 1;
}

message UpdatePlayerInputs { // C --> S
  uint64 inputs_bitfield = 1; // на самом деле используется uint32, но 64 нужно для нормальной работы в Java ("long")
}

message UpdateEntityPosition { // C <-- S
  uint32 entity_id  = 1;
  float  pos_x      = 2;
  float  pos_y      = 3;
  float  face_angle = 4;
}

/*
---------------------------------------------------------------------------------------------------
   ОБЩИЕ (GENERAL)
---------------------------------------------------------------------------------------------------
 */

// ...

/*
---------------------------------------------------------------------------------------------------
   ОБЁРТКА ВСЕХ ПАКЕТОВ
   Используется для идентификации пакетов при получении их в виде "сырого" массива байтов.
---------------------------------------------------------------------------------------------------
 */

message PacketWrapper {
  // "Протоколообразующие" поля, общие для всех пакетов - и для тех, которые отправляет клиент серверу,
  // и для тех, которые сервер отправляет клиенту. Используется для надёжности протокола:
  // https://gafferongames.com/post/reliability_ordering_and_congestion_avoidance_over_udp/
  uint32 sequence     = 1;
  uint32 ack          = 2;
  uint64 ack_bitfield = 3; // на самом деле используется uint32, но 64 нужно для нормальной работы в Java ("long")

  // Номера с     1 по     9 зарезервированы "протоколообразующие" (основные) поля (описаны немного выше ^) и пакеты,
  //        с    10 по   999               - под PacketCase пакетов предыгрового этапа (LOBBY STATE),
  //        с  1000 по  9999               - под PacketCase пакетов игрового этапа (PLAY STATE),
  //        с 10000 по 99999               - под PacketCase общих пакетов (GENERAL).
  //
  // ВАЖНО: (1) внутри этого блока 'oneof packet {...}' запрещено использовать комментарии /* такого */ вида
  //            (в т.ч. многострочные - последовательность "/*" внутри этого блока не должно быть в любом виде);
  //        (2) названия полей ("oneof case", "packet case") должны быть snake_case; кроме того, между названием
  //            класса пакета (message) и названием поля должен быть ровно один пробел (напр., "Ping ping").
  oneof packet {
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   PROTOCOL BASICS    [4..9]
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Ping ping = 4;
    Pong pong = 5;

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   LOBBY STATE    [10..999]
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    HandshakeRequest handshake_request               =  10;
    HandshakeResponse handshake_response             =  11;
    CreateLobbyRequest create_lobby_request          = 100;
    CreateLobbyResponse create_lobby_response        = 101;
    JoinLobbyRequest join_lobby_request              = 102;
    JoinLobbyResponse join_lobby_response            = 103;
    LeaveLobbyRequest leave_lobby_request            = 104;
    LeaveLobbyResponse leave_lobby_response          = 105;
    KickedFromLobby kicked_from_lobby                = 106;
    UpdatedMembersList updated_members_list          = 107;
    BeginPlayStateRequest begin_play_state_request   = 901;
    BeginPlayStateResponse begin_play_state_response = 902;

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   PLAY STATE    [1000..9999]
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    UpdateDimensionCommand update_dimension_command   = 1000;
    UpdateDimensionComplete update_dimension_complete = 1001;
    JoinWorldCommand join_world_command               = 1002;
    JoinWorldComplete join_world_complete             = 1003;
    SpawnEntity spawn_entity                          = 2000;
    DespawnEntity despawn_entity                      = 2001;
    UpdatePlayerInputs update_player_inputs           = 3000;
    UpdateEntityPosition update_entity_position       = 3001;

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   GENERAL    [10000..99999]
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ...
  }
}
