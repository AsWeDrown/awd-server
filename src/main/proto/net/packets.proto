///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Основные параметры .proto.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";
package awd.net;




///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Опции для компиляции .proto в Java.
// Для самой компиляции исп. скрипт "compile_proto_files_for_java".
//
///////////////////////////////////////////////////////////////////////////////////////////////////

option java_multiple_files = true;
option java_package = "gg.aswedrown.net";




///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Спецификация протокола AsWeDrown:
// --> https://github.com/AsWeDrown/awd-protocol/wiki/
//
// TODO - МЕНЯТЬ ЗДЕСЬ: PROTOCOL_VERSION = 1
// 
// TODO - При любом изменении этого файла (и, соответственно, версии протокола) выполнять
//        скрипт "0_on_proto_files_change.bat", находящийся в папке "AwdClient/scripts".
// 
// ВАЖНО: основная ("рабочая") версия этого файла находится в папке "AwdClient/net".
//        В любых местах лежит лишь копия, которая используется максимум для удобства!
//
///////////////////////////////////////////////////////////////////////////////////////////////////

/*
---------------------------------------------------------------------------------------------------
   ПРЕДЫГРОВОЙ ЭТАП (LOBBY STATE)
---------------------------------------------------------------------------------------------------
 */

message HandshakeRequest {
  uint32 protocol_version = 1;
}

message HandshakeResponse {
  uint32 protocol_version = 1;
}

message CreateLobbyRequest {
  string player_name = 1;
}

message CreateLobbyResponse {
  sint32 lobby_id  = 1;
  uint32 player_id = 2;
}

message JoinLobbyRequest {
  uint32 lobby_id    = 1;
  string player_name = 2;
}

message JoinLobbyResponse {
  sint32             player_id     = 1;
  map<int32, string> other_players = 2;
}

message LeaveLobbyRequest {
  uint32 lobby_id  = 1;
  uint32 player_id = 2;
}

message LeaveLobbyResponse {
  sint32 status_code = 1;
}

message KickedFromLobby {
  uint32 reason = 1;
}

message UpdatedMembersList {
  map<uint32, string> members = 1;
}

/*
---------------------------------------------------------------------------------------------------
   ИГРОВОЙ ЭТАП (PLAY STATE)
---------------------------------------------------------------------------------------------------
 */

message KeepAlive {
  int32 player_id = 1;
  int32 test_id   = 2;
}

/*
---------------------------------------------------------------------------------------------------
   ОБЩИЕ (GENERAL)
---------------------------------------------------------------------------------------------------
 */

message Ping {
  uint32 test_id      = 1;
  uint32 last_latency = 2;
}

message Pong {
  uint32 test_id = 1;
}

/*
---------------------------------------------------------------------------------------------------
   ОБЁРТКА ВСЕХ ПАКЕТОВ
   Используется для идентификации пакетов при получении их в виде "сырого" массива байтов.
---------------------------------------------------------------------------------------------------
 */

message PacketWrapper {
  // "Протоколообразующие" поля, общие для всех пакетов - и для тех, которые отправляет клиент серверу,
  // и для тех, которые сервер отправляет клиенту. Используется для надёжности протокола:
  // https://gafferongames.com/post/reliability_ordering_and_congestion_avoidance_over_udp/
  uint32 sequence     = 1;
  uint32 ack          = 2;
  uint64 ack_bitfield = 3; // на самом деле используется uint32, но 64 нужно для нормальной работы в Java

  // Номера с     1 по     9 зарезервированы "протоколообразующие" (основные) поля (описаны немного выше ^),
  //        с    10 по   999               - под PacketCase пакетов предыгрового этапа (LOBBY STATE),
  //        с  1000 по  9999               - под PacketCase пакетов игрового этапа (PLAY STATE),
  //        с 10000 по 99999               - под PacketCase общих пакетов (GENERAL).
  //
  // ВАЖНО: (1) внутри этого блока 'oneof packet {...}' запрещено использовать комментарии /* такого */ вида
  //            (в т.ч. многострочные - последовательность "/*" внутри этого блока не должно быть в любом виде);
  //        (2) названия полей ("oneof case", "packet case") должны быть snake_case; кроме того, между названием
  //            класса пакета (message) и названием поля должен быть ровно один пробел (напр., "Ping ping").
  oneof packet {
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   LOBBY STATE
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    HandshakeRequest handshake_request           =    10;
    HandshakeResponse handshake_response         =    11;
    CreateLobbyRequest create_lobby_request      =   100;
    CreateLobbyResponse create_lobby_response    =   101;
    JoinLobbyRequest join_lobby_request          =   102;
    JoinLobbyResponse join_lobby_response        =   103;
    LeaveLobbyRequest leave_lobby_request        =   104;
    LeaveLobbyResponse leave_lobby_response      =   105;
    KickedFromLobby kicked_from_lobby            =   106;
    UpdatedMembersList updated_members_list      =   107;

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   PLAY STATE
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    KeepAlive keep_alive                  =  1000;//todo delete

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //   GENERAL
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Ping ping    = 10000;
    Pong pong    = 10001;
  }
}
